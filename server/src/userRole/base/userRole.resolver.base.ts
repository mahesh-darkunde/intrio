/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { UserRole } from "./UserRole";
import { UserRoleCountArgs } from "./UserRoleCountArgs";
import { UserRoleFindManyArgs } from "./UserRoleFindManyArgs";
import { UserRoleFindUniqueArgs } from "./UserRoleFindUniqueArgs";
import { CreateUserRoleArgs } from "./CreateUserRoleArgs";
import { UpdateUserRoleArgs } from "./UpdateUserRoleArgs";
import { DeleteUserRoleArgs } from "./DeleteUserRoleArgs";
import { UserRoleService } from "../userRole.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UserRole)
export class UserRoleResolverBase {
  constructor(
    protected readonly service: UserRoleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserRole",
    action: "read",
    possession: "any",
  })
  async _userRolesMeta(
    @graphql.Args() args: UserRoleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserRole])
  @nestAccessControl.UseRoles({
    resource: "UserRole",
    action: "read",
    possession: "any",
  })
  async userRoles(
    @graphql.Args() args: UserRoleFindManyArgs
  ): Promise<UserRole[]> {
    return this.service.userRoles(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserRole, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserRole",
    action: "read",
    possession: "own",
  })
  async userRole(
    @graphql.Args() args: UserRoleFindUniqueArgs
  ): Promise<UserRole | null> {
    const result = await this.service.userRole(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserRole)
  @nestAccessControl.UseRoles({
    resource: "UserRole",
    action: "create",
    possession: "any",
  })
  async createUserRole(
    @graphql.Args() args: CreateUserRoleArgs
  ): Promise<UserRole> {
    return await this.service.createUserRole({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserRole)
  @nestAccessControl.UseRoles({
    resource: "UserRole",
    action: "update",
    possession: "any",
  })
  async updateUserRole(
    @graphql.Args() args: UpdateUserRoleArgs
  ): Promise<UserRole | null> {
    try {
      return await this.service.updateUserRole({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserRole)
  @nestAccessControl.UseRoles({
    resource: "UserRole",
    action: "delete",
    possession: "any",
  })
  async deleteUserRole(
    @graphql.Args() args: DeleteUserRoleArgs
  ): Promise<UserRole | null> {
    try {
      return await this.service.deleteUserRole(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Query(() => String)
  async AdminEmail(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.AdminEmail(args);
  }

  @graphql.Query(() => String)
  async AdminId(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.AdminId(args);
  }

  @graphql.Query(() => String)
  async AdminName(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.AdminName(args);
  }

  @graphql.Query(() => String)
  async CreateUserRole(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.CreateUserRole(args);
  }

  @graphql.Mutation(() => String)
  async DeleteUserRole(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.DeleteUserRole(args);
  }

  @graphql.Query(() => String)
  async DesignerId(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.DesignerId(args);
  }

  @graphql.Query(() => String)
  async GetUserRoleById(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.GetUserRoleById(args);
  }

  @graphql.Query(() => String)
  async UpdateUserRole(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.UpdateUserRole(args);
  }

  @graphql.Query(() => String)
  async UserId(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.UserId(args);
  }

  @graphql.Query(() => String)
  async UserName(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.UserName(args);
  }
}
